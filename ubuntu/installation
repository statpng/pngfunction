### https://wikidocs.net/68617

sudo apt-get update # 실제 패키지 버전을 업그레이드 하는 것이 아니라, 최신 버전 패키지가 있는지 확인하고 내 우분트에 알려주는 것
apt-get upgrade # 우분트에 있는 패키지들을 실제로 최신 버전으로 업그레이드 하는 명령어

# pip 설치
apt-get install python3-pip

# 환경 확인
sudo lshw -c display


# 그래픽카드 (Ubuntu 20.0.4에 cuda 설치하기)
## https://webnautes.tistory.com/1428

## gcc 설치하기
$ sudo apt update

$ sudo apt -y install build-essential
$ sudo apt -y install gcc-8 g++-8 gcc-9 g++-9

$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 --slave /usr/bin/g++ g++ /usr/bin/g++-8
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9 --slave /usr/bin/g++ g++ /usr/bin/g++-9

$ sudo update-alternatives --config gcc
$ 0

## python dependency packages 설치하기
$ sudo apt install -y zlib1g-dev libbz2-dev libreadline-dev libssl-dev libsqlite3-dev libffi-dev curl file git python3-pip make build-essential

$ sudo pip3 install virtualenvwrapper


## pyenv 설치하기
$ curl https://pyenv.run | bash

$ echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc

$ echo 'eval "$(pyenv init -)"' >> ~/.bashrc

$ echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

$ source ~/.bashrc

## python 3.7 설치하기
- Refer to the following url for checking the python version for tensorflow: https://www.tensorflow.org/install/pip?hl=ko
$  pyenv install 3.7.7

### python3를 default로 사용하기
$ sudo apt install python-is-python3

$ python -V


## 가상환경 구축
$ pyenv virtualenv 3.7.7 tf2

$ pyenv versions

- Activate the virtual environment
$ pyenv global tf2

- Deactivate the virtual environment
$ pyenv global system


## 그래픽카드 드라이버 설치

### 버전 확인 (recommended 보면 됨)
$ ubuntu-drivers devices


### 해당 버전의 드라이버 설치하기
$ sudo apt install nvidia-driver-440


### 재부팅
$ reboot

### 설치된 드라이버 버전 확인
$ nvidia-smi


## CUDA Toolkit 설치 (CUDA toolkit 10.1 --> gcc 8)
$ sudo update-alternatives --config gcc
$ 1

### gcc 버전 == 8 확인
$ gcc --version

### 다음 링크에 접속하여 10.1 update2를 클릭합니다. 

https://developer.nvidia.com/cuda-toolkit-archive


### 설치프로그램 다운로드 및 실행
$ wget http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run

$ chmod +x cuda_10.1.243_418.87.00_linux.run 

$ sudo ./cuda_10.1.243_418.87.00_linux.run 


### 환경변수 추가

$ echo 'export PATH=$PATH:/usr/local/cuda-10.1/bin' >> ~/.bash_profile
$ echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-10.1/lib64' >> ~/.bash_profile
$ echo 'export CUDADIR=/usr/local/cuda-10.1' >> ~/.bash_profile
$ source ~/.bash_profile



## cuDNN 설치

### Download cuDNN을 클릭합니다. 
    CUDA 10.1를 위한 cuDNN v7.6.5 항목을 클릭

https://developer.nvidia.com/cudnn


### 다운로드 받은 cuDNN 파일을 압축 풀어 CUDA Toolkit가 설치된 경로에 복사합니다.
참고로 현재 /usr/local/cuda 디렉토리는  /usr/local/cuda-10.1/ 디렉토리를 가리키는 링크입니다. 

$ ls -l /usr/local/ 


### 다운로드 받은 파일을 홈디렉토리로 가져와 압축을 풀어줍니다. 

$ mv ~/다운로드/cudnn-10.1-linux-x64-v7.6.5.32.tgz .

$ tar -xzvf cudnn-10.1-linux-x64-v7.6.5.32.tgz

### cuDNN 파일을 CUDA Toolkit가 설치된 디렉토리에 복사해줍니다. 

$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include
$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*


### 파일 복사 과정에 링크 파일이 실제 파일의 복사본이 된것을 올바로 잡아줍니다.

$ cd /usr/local/cuda-10.1/targets/x86_64-linux/lib/
$ sudo rm libcudnn.so.7 libcudnn.so
$ sudo ln -s libcudnn.so.7.6.5 libcudnn.so.7
$ sudo ln -s libcudnn.so.7 libcudnn.so

### 새로 추가된 라이브러리를 시스템에서 찾을 수 있도록 하고 루트 디렉토리로 이동합니다.  
$ sudo ldconfig

$ cd


### 버전 확인

#### CUDA Toolkit
$ nvcc --version

#### cuDNN  (다음 명령을 실행하여 버전이 7.6.5가 보여야 함)

$ ldconfig -N -v $(sed 's/:/ /' <<< $LD_LIBRARY_PATH) 2>/dev/null | grep libcudnn
> libcudnn.so.7 -> libcudnn.so.7.6.5



###
$ cd /usr/local/cuda-10.1/targets/x86_64-linux/lib/
$ sudo rm libcudnn.so.7 libcudnn.so
$ sudo ln -s libcudnn.so.7.6.5 libcudnn.so.7
$ sudo ln -s libcudnn.so.7 libcudnn.so


$ sudo apt install cuda
wget -O /etc/apt/preferences.d/cuda-repository-pin-600 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
$ sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
$ sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"

$ sudo apt install cuda

$ echo 'export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}' >> ~/.bashrc

$ nvcc --version
nvidia-smi
